"""
Django settings for dri project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

import ldap
from django_auth_ldap.config import LDAPSearch

# Paths e URLs da aplicação NÃO devem ser altarados!.

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# Diretorio de intalacao do projeto dentro do container.
BASE_PROJECT = "/app"

# Diretorio onde ficam os arquivos estaticos gerados pela aplicacao, arquivos como imagens, csvs, zips que necessitam
# ter uma url acessivel para download.
DATA_DIR = os.path.join('/archive')
# Diretorio para arquivos temporarios, gerados pelo sistema e que ficarão disponiveis para o usuario fazer o download.
# esse diretorio deve ser usado junto com o DATA_DIR, deve OBRIGATORIAMENTE ser um diretorio dentro do DATA_DIR
DATA_TMP_DIR = 'tmp'
# Url base para o diretorio onde os arquivos gerados pela aplicacao podem ser acessados pelo servidor web
DATA_SOURCE = "/data"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n25!pd%vs_s_@9^8=cudeuvc1&tfw0er+u#rhn(ex9t4@ml728'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
LOG_LEVEL = 'DEBUG'

ALLOWED_HOSTS = ['*']
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

USE_OAUTH = True

# Application definition
BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.sites',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

AUTH_APPS = [
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'url_filter',
    'django_celery_results',
]

PROJECT_APPS = [
    'common',
    'coadd',
    'comment',
    'product_classifier',
    'product_register',
    'product',
    'validation',
    'catalog',
    'interfaces',
    'userquery',
    'aladin',
    'activity_statistic',
]

if USE_OAUTH:
    INSTALLED_APPS = BASE_APPS + AUTH_APPS + THIRD_PARTY_APPS + PROJECT_APPS
else:
    INSTALLED_APPS = BASE_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'current_user.CurrentUserMiddleware',
]

ROOT_URLCONF = 'dri.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': [BASE_DIR, os.path.join(BASE_DIR, '../templates')],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_settings_export.settings_export',
            ],
        },
    },
]

WSGI_APPLICATION = 'dri.wsgi.application'

DATABASE_ROUTERS = ['catalog.router.CatalogRouter']

APPEND_SLASH = False

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 4
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/django_static/'

AUTHENTICATION_BACKENDS = (
    'common.authentication.NcsaBackend',
    'django.contrib.auth.backends.ModelBackend',
)

if USE_OAUTH:
    AUTHENTICATION_BACKENDS += ('allauth.account.auth_backends.AuthenticationBackend',)


REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication'
    ),

    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',

    'DEFAULT_FILTER_BACKENDS': (
        'url_filter.integrations.drf.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
}

SITE_ID = 1

ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True
LOGIN_REDIRECT_URL = '/'
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_ADAPTER = 'validation.adapter.DriAccountAdapter'

SOCIALACCOUNT_PROVIDERS = {
    'facebook': {
        'SCOPE': ['email'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'METHOD': 'oauth2',
        'VERIFIED_EMAIL': False
    },
    'google': {
        'SCOPE': ['email'],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# CELERY SETTINGS
CELERY = {
    'BROKER_URL': os.environ.get('CELERY_BROKER', 'localhost'),
    'CELERY_IMPORTS': ('product.tasks', 'common.tasks', 'common.tasks', 'activity_statistic.tasks', 'userquery.tasks',),
    'CELERY_RESULT_BACKEND': 'django-db',
    'CELERY_TASK_SERIALIZER': 'json',
    'CELERY_RESULT_SERIALIZER': 'json',
    'CELERY_ACCEPT_CONTENT': ['json'],
}

# Lista as Variaveis que vao ser exportadas para os templates do Django. https://pypi.python.org/pypi/django-settings-export
SETTINGS_EXPORT = [
    'NCSA_SIGNUP_LINK'
]

# Variaveis a seguir Devem ser sobreescritas pelo local_vars.py

# Identification of the environment
ENVIRONMENT_NAME = "Development"

# Está Variavel é usada para montar algumas urls dinamicamente DEVE ser sobreescrita pelo local_vars.py
# Deve contar o protoloco e hostname onde a aplicação está instalada ex: BASE_HOST = "http://localhost"
BASE_HOST = "http://localhost"

# Database
# Esta variavel deve ser preechida no local_vars.py deve conter obrigatóriamente
# 2 bancos de dados denominados de default e catalog.
# - N bancos de dados podem ser cadastradados.
# - O mesmo banco pode ser cadastrado mais de uma vez com alias diferentes, as vezes é necessário para usar schemas diferentes do mesmo banco, exemplo dos bancos oracle do NCSA.
# - Pode ser cadastrados bancos de dados de tipos diferentes exemplo Oracle e Postgresql.
# - para o Oracle o nome da chave que representa o banco não pode ter mais de 30 caracteres e nem o database name,
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
DATABASES = {}
# Exemplo de Database utilizando a imagem docker do postgresql
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': 'database',
#         'PORT': 5432,
#         'OPTIONS': {
#             'options': '-c search_path=dri_admin,public'
#         }
#     },
#     'catalog': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': 'database',
#         'PORT': 5432,
#         'OPTIONS': {
#             'options': '-c search_path=dri_catalog,public'
#         },
#     },
# }

# Autenticação no NCSA
# Esta configuracao e usada somente pela classe de authenticacao usando login do NCSA
# deve ser preenchida com o nome da configuracao de database do NCSA OU None para nao usar a authenticacao no ncsa
NCSA_AUTHENTICATION_DB = "None"
# Nome da tabela onde ficam os dados do usuario com schema se tiver ex: DES_USER para colaboracao e DES_ADMIN.DES_USER para DR1 publico ou None para desabilitar
NCSA_AUTHENTICATION_USERS_TABLE = "None"
# Habilita ou desabilita o link de signup no form de login.
# None desabilita e String com Url para o form de login para habilitar.
# Default None, para NCSA public usar 'https://des.ncsa.illinois.edu/easyweb/signup/'
NCSA_SIGNUP_LINK = None

# LDAP Authentication
# Responsible for turn on and off the LDAP authentication:
AUTH_LDAP_ENABLED = False
if AUTH_LDAP_ENABLED:
    # The address of the LDAP server:
    AUTH_LDAP_SERVER_URI = 'ldap://HOST:PORT'
    # The password of the LDAP server (leave empty if anonymous requests are available):
    AUTH_LDAP_BIND_PASSWORD = ''
    # The distinguishable name, used to identify entries:
    AUTH_LDAP_BIND_DN = 'cn=admin,dc=example,dc=com'
    # The distinguishable name for searching users, used to identify entries:
    AUTH_LDAP_USER_SEARCH_DN = 'ou=people,dc=example,dc=com'
    AUTH_LDAP_USER_SEARCH = LDAPSearch(
        AUTH_LDAP_USER_SEARCH_DN,
        ldap.SCOPE_SUBTREE, "(uid=%(user)s)"
    )
# Including LDAP authentication:
if AUTH_LDAP_ENABLED:
    AUTHENTICATION_BACKENDS += ('django_auth_ldap.backend.LDAPBackend',)

# Email Notification configs
# Dados de configuração do servidor de email que será usado para envio das notificações.
EMAIL_HOST = ''
EMAIL_PORT = ''
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = True
# Email utilizado para enviar as notificacoes do science server
EMAIL_NOTIFICATION = 'noreply@desportal.cosmology.illinois.edu'
# Lista de email que receberão uma copia de todas as notificacoes
EMAIL_NOTIFICATION_COPY_TO = list([])
# Email para o helpdesk LIneA
EMAIL_HELPDESK = 'helpdesk@linea.gov.br'
# Email de contato do LIneA
EMAIL_HELPDESK_CONTACT = 'contato-dri@linea.gov.br'
# Email que recebera as notificacoes e relatorios gerados pelo science server
EMAIL_ADMIN = ''
# Enables or disables sending daily email access statistics.
SEND_DAILY_STATISTICS_EMAIL = False

# Configs das Aplicações:
# TARGET VIEWER:
# Habilita ou desabilita a interface de registro de produtos pela opcao Database,
# esta Settings e usada apenas pelo frontend.
PRODUCT_REGISTER_DB_INTERFACE = True
# Habilita ou Desabilita a opcao de escolher o Folder na hora de registrar um produto.
PRODUCT_REGISTER_FOLDERS = True
# Habilita ou Desabilita a opção de registrar um produto como publico, pela interface.
PRODUCT_REGISTER_ENABLE_PUBLIC = False
# Target Viewer Rating, Reject Schema Feature
# Lista de databases que o Target viewer pode acessar, deve ser o mesmo onde as tabelas rating e reject foram criada.
# As vezes é necessário ter o mesmo banco de dados com 2 configurações, como acontece com o catalog e dessci no NCSA.
# nesse caso o usuario só conhece o dessci
# este campo deveria ser preenchido com o valor dessci.
TARGET_VIEWER_DATABASES = []
# Schema onde estão as tabelas rating e reject.
SCHEMA_RATING_REJECT = None
# Save As default Schema, Utilizado pela feature Target::Save As caso seja None, o schema utilizado
# sera o mesmo do produto original mais vai requerer permissao.
# para o ncsa cada usuario tem um schema utilizar o nome de usuario da conf 'catalog'
SCHEMA_SAVE_AS = None
# USER_QUERY:
# Tempo de execucao de um job no User query.
USER_QUERY_EXECUTION_TIMEOUT = 300
# Limite de linhas de uma query
USER_QUERY_MAX_ROWS = 100000

# DES ACCESS API
# Usada para o Cutout de targets e Download das imagens de Tiles.
# API Reference: https://deslabs.ncsa.illinois.edu/desaccess/docs/api/
# Essas configs são usadas pelas classes common.desaccess e product.descutoutservice
DESACCESS_API = {
    # URL Principal do Serviço.
    'API_URL': 'https://deslabs.ncsa.illinois.edu/desaccess/api',
    # URL para download dos resultados do cutout job.
    'FILES_URL': 'https://deslabs.ncsa.illinois.edu/files-desaccess',
    # Usuario Oracle do NCSA com acesso ao desaccess.
    'USERNAME': None,
    'PASSWORD': None,
    # Database Oracle que será usado para authenticar as credenciais. must be either 'dessci' or 'desoper' usar mesmo database usado em NCSA_AUTHENTICATION_DB
    'DATABASE': 'dessci',
    # Lista dos Releases disponiveis no serviço do descut. OBS: está lista de releases é utilizada pela interface no formulário de submissão.
    'AVAILABLE_RELEASES': ['Y6A1', 'Y3A2', 'Y1A1', 'SVA1'],
    # Max de cutouts que o Descut aceita por job. default is 20000
    'MAX_OBJECTS': 20000
}
# Others app config:
# Tempo limite em horas para que um produto fique disponivel, apos este tempo
# o produto sera removido pelo garbage colector e sua tabela sera dropada. Use None para desabilitar.
PRODUCT_EXPIRATION_TIME = None
# Plugin Galaxy Cluster para o Explorer #TODO: Este plugin não existe mais!!!.
# Url para acessar o container com o plugin do galaxy cluster
PLUGIN_GALAXY_CLUSTER_HOST = "http://localhost:8000"

# Logs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(message)s'
        },
    },
    'handlers': {
        'default': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join('/log', 'django.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
        'db_handler': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join('/log', 'django_db.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
        # DRI APPS Logs
        'descutoutservice': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join('/log', 'cutout.log'),
            'formatter': 'standard',
        },
        'downloads': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join('/log', 'downloads.log'),
            'formatter': 'standard',
        },
        'import_process': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join('/log', 'import_process.log'),
            'formatter': 'standard',
        },
        'product_export': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join('/log', 'product_export.log'),
            'formatter': 'standard',
        },
        'import_target_csv': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join('/log', 'import_target_csv.log'),
            'formatter': 'standard',
        },
        'product_saveas': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join('/log', 'product_saveas.log'),
            'formatter': 'standard',
        },
        'ncsa_authentication': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join('/log', 'ncsa_authentication.log'),
            'formatter': 'standard',
        },
        'garbage_colector': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join('/log', 'garbage_colector.log'),
            'formatter': 'standard',
        },
        'userquery': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join('/log', 'userquery.log'),
            'formatter': 'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['default'],
            'level': LOG_LEVEL,
            'propagate': True
        },
        'django.db.backends': {
            'handlers': ['db_handler'],
            'level': LOG_LEVEL,
            'propagate': False
        },
        # DRI APPS Logs
        'descutoutservice': {
            'handlers': ['descutoutservice'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'downloads': {
            'handlers': ['downloads'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'import_process': {
            'handlers': ['import_process'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'product_export': {
            'handlers': ['product_export'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'import_target_csv': {
            'handlers': ['import_target_csv'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'product_saveas': {
            'handlers': ['product_saveas'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'ncsa_authentication': {
            'handlers': ['ncsa_authentication'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'garbage_colector': {
            'handlers': ['garbage_colector'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'userquery': {
            'handlers': ['userquery'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
    }
}
