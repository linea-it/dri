"""
Django settings for dri project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import saml2
import saml2.saml
import environ

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    AUTH_SAML2_ENABLED=(bool, False)
)
# Paths e URLs da aplicação NÃO devem ser altarados!.

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Diretorio de intalacao do projeto dentro do container.
BASE_PROJECT = "/app"

# Diretorio onde ficam os arquivos estaticos gerados pela aplicacao, arquivos como imagens, csvs, zips que necessitam
# ter uma url acessivel para download.
DATA_DIR = os.path.join("/archive")
# Diretorio para arquivos temporarios, gerados pelo sistema e que ficarão disponiveis para o usuario fazer o download.
# esse diretorio deve ser usado junto com o DATA_DIR, deve OBRIGATORIAMENTE ser um diretorio dentro do DATA_DIR
DATA_TMP_DIR = "tmp"
# Url base para o diretorio onde os arquivos gerados pela aplicacao podem ser acessados pelo servidor web
DATA_SOURCE = "/data"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "2U4eWrYD4f4JzhdusMHO7Mix6NB_QZj5oOOu1L2SWq8")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

# Application definition
BASE_APPS = [
    "django.contrib.admin",
    "django.contrib.sites",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "django_filters",
    "url_filter",
    "django_celery_results",
]

PROJECT_APPS = [
    "common",
    "coadd",
    "comment",
    "product_classifier",
    "product_register",
    "product",
    "validation",
    "catalog",
    "interfaces",
    "aladin",
    "activity_statistic",
]

INSTALLED_APPS = BASE_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "current_user.CurrentUserMiddleware",
]

ROOT_URLCONF = "dri.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
        "DIRS": [BASE_DIR, os.path.join(BASE_DIR, "../templates")],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django_settings_export.settings_export",
            ],
        },
    },
]

WSGI_APPLICATION = "dri.wsgi.application"

DATABASE_ROUTERS = ["catalog.router.CatalogRouter"]

APPEND_SLASH = False

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 4},
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/django_static/"

AUTHENTICATION_BACKENDS = (
    "common.authentication.NcsaBackend",
    "django.contrib.auth.backends.ModelBackend",
)

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        # 'rest_framework.authentication.TokenAuthentication'
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "DEFAULT_FILTER_BACKENDS": (
        "url_filter.integrations.drf.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
}

SITE_ID = 1

ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True
LOGIN_REDIRECT_URL = "/"

# CELERY SETTINGS
CELERY = {
    "BROKER_URL": os.environ.get("CELERY_BROKER", "localhost"),
    "CELERY_IMPORTS": (
        "product.tasks",
        "common.tasks",
        "activity_statistic.tasks",
    ),
    "CELERY_RESULT_BACKEND": "django-db",
    "CELERY_TASK_SERIALIZER": "json",
    "CELERY_RESULT_SERIALIZER": "json",
    "CELERY_ACCEPT_CONTENT": ["json"],
}

# Variaveis a seguir Devem ser sobreescritas pelo local_vars.py

# Identification of the environment
ENVIRONMENT_NAME = "Development"

# Está Variavel é usada para montar algumas urls dinamicamente DEVE ser sobreescrita pelo local_vars.py
# Deve contar o protoloco e hostname onde a aplicação está instalada ex: BASE_HOST = "http://localhost"
BASE_HOST = os.environ.get("BASE_HOST", "http://localhost")
DOMAIN = os.environ.get("DOMAIN", "localhost")

# Database
# Esta variavel deve ser preechida no local_vars.py deve conter obrigatóriamente
# 2 bancos de dados denominados de default e catalog.
# - N bancos de dados podem ser cadastradados.
# - O mesmo banco pode ser cadastrado mais de uma vez com alias diferentes, as vezes é necessário para usar schemas diferentes do mesmo banco, exemplo dos bancos oracle do NCSA.
# - Pode ser cadastrados bancos de dados de tipos diferentes exemplo Oracle e Postgresql.
# - para o Oracle o nome da chave que representa o banco não pode ter mais de 30 caracteres e nem o database name,
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
DATABASES = {}
# Exemplo de Database utilizando a imagem docker do postgresql
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': 'database',
#         'PORT': 5432,
#         'OPTIONS': {
#             'options': '-c search_path=dri_admin,public'
#         }
#     },
#     'catalog': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': 'database',
#         'PORT': 5432,
#         'OPTIONS': {
#             'options': '-c search_path=dri_catalog,public'
#         },
#     },
# }

# LIneA MYDB 
USER_SCHEMA_PREFIX="mydb_"

# Autenticação no NCSA
# Esta configuracao e usada somente pela classe de authenticacao usando login do NCSA
# deve ser preenchida com o nome da configuracao de database do NCSA OU None para nao usar a authenticacao no ncsa
NCSA_AUTHENTICATION_DB = "None"
# Nome da tabela onde ficam os dados do usuario com schema se tiver ex: DES_USER para colaboracao e DES_ADMIN.DES_USER para DR1 publico ou None para desabilitar
NCSA_AUTHENTICATION_USERS_TABLE = "None"
# Habilita ou desabilita o link de signup no form de login.
# None desabilita e String com Url para o form de login para habilitar.
# Default None, para NCSA public usar 'https://des.ncsa.illinois.edu/easyweb/signup/'
NCSA_SIGNUP_LINK = None

# Email Notification configs
# Dados de configuração do servidor de email que será usado para envio das notificações.
EMAIL_HOST = ""
EMAIL_PORT = ""
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
EMAIL_USE_TLS = False
# Email utilizado para enviar as notificacoes do science server
EMAIL_NOTIFICATION = "noreply@desportal.cosmology.illinois.edu"
# Lista de email que receberão uma copia de todas as notificacoes
EMAIL_NOTIFICATION_COPY_TO = list([])
# Email para o helpdesk LIneA
EMAIL_HELPDESK = "helpdesk@linea.org.br"
# Email de contato do LIneA
EMAIL_HELPDESK_CONTACT = "contato-dri@linea.org.br"
# Email que recebera as notificacoes e relatorios gerados pelo science server
EMAIL_ADMIN = ""
# Enables or disables sending daily email access statistics.
SEND_DAILY_STATISTICS_EMAIL = False

# Configs das Aplicações:
# TARGET VIEWER:
# Habilita ou desabilita a interface de registro de produtos pela opcao Database,
# esta Settings e usada apenas pelo frontend.
PRODUCT_REGISTER_DB_INTERFACE = True
# Habilita ou Desabilita a opcao de escolher o Folder na hora de registrar um produto.
PRODUCT_REGISTER_FOLDERS = True
# Habilita ou Desabilita a opção de registrar um produto como publico, pela interface.
PRODUCT_REGISTER_ENABLE_PUBLIC = False

# Target Viewer Rating, Reject Schema Feature
# Lista de databases que o Target viewer pode acessar, deve ser o mesmo onde as tabelas rating e reject foram criada.
# As vezes é necessário ter o mesmo banco de dados com 2 configurações, como acontece com o catalog e dessci no NCSA.
# nesse caso o usuario só conhece o dessci
# este campo deveria ser preenchido com o valor dessci.
TARGET_VIEWER_DATABASES = []

# TILE VIEWER/TILE INSPECTION (antigo eyeballing):
# Esta config muda o comportamento da ferramenta Tile Viewer.
# Quando Ligada habilita as funcionalidades de validação e inspeção das tiles
# Comentários, avaliações (Good, Bad), avaiação por posição e relatórios.
# Quando Desligada a ferramente se torna Tile Viewer, ficam só as
# funcões de navegação entre tiles, visualização e download.
# True: para Tile Inspection (essa opção deve estar ligada somente no ambiente da colaboração NCSA.)
# False: para Tile Viewer (essa é a opção default)
TILE_VIEWER_INSPECTION_ENABLED = False
# Landing Page
# Define a pagina de SignUp que sera utilizada pela landingpage
# utilize 'linea-sign-up' para a pagina de registro do linea
# utilize 'oracle-easy-access' para a pagina de registro do NCSA
# o default é 'oracle-easy-access' para manter a compatibilidade com os ambientes mas antigos instalados no NCSA.
SIGN_UP_ROUTE = "oracle-easy-access"

# DES ACCESS API
# Usada para o Cutout de targets e Download das imagens de Tiles.
# API Reference: https://deslabs.ncsa.illinois.edu/desaccess/docs/api/
# Essas configs são usadas pelas classes common.desaccess e product.descutoutservice
DESACCESS_API = {
    # URL Principal do Serviço.
    "API_URL": "https://deslabs.ncsa.illinois.edu/desaccess/api",
    # URL para download dos resultados do cutout job.
    "FILES_URL": "https://deslabs.ncsa.illinois.edu/files-desaccess",
    # Usuario Oracle do NCSA com acesso ao desaccess.
    "USERNAME": None,
    "PASSWORD": None,
    # Database Oracle que será usado para authenticar as credenciais. must be either 'dessci' or 'desoper' usar mesmo database usado em NCSA_AUTHENTICATION_DB
    "DATABASE": "dessci",
    # Lista dos Releases disponiveis no serviço do descut. OBS: está lista de releases é utilizada pela interface no formulário de submissão.
    "AVAILABLE_RELEASES": ["Y6A1", "Y3A2", "Y1A1", "SVA1"],
    # Max de cutouts que o Descut aceita por job. default is 20000
    "MAX_OBJECTS": 20000,
}
# Others app config:
# Tempo limite em horas para que um produto fique disponivel, apos este tempo
# o produto sera removido pelo garbage colector e sua tabela sera dropada. Use None para desabilitar.
PRODUCT_EXPIRATION_TIME = None
# Plugin Galaxy Cluster para o Explorer #TODO: Este plugin não existe mais!!!.
# Url para acessar o container com o plugin do galaxy cluster
PLUGIN_GALAXY_CLUSTER_HOST = "http://localhost:8000"

# COmanage Autorization
COMANAGE_SERVER_URL = os.environ.get("COMANAGE_SERVER_URL", "https://register.linea.org.br")
COMANAGE_USER = os.environ.get("COMANAGE_USER")
COMANAGE_PASSWORD = os.environ.get("COMANAGE_PASSWORD")
COMANAGE_COID = os.environ.get("COMANAGE_COID", 2)

AUTH_SAML2_ENABLED = env("AUTH_SAML2_ENABLED")
AUTH_SAML2_LOGIN_URL_CAFE = None
AUTH_SAML2_LOGIN_URL_CILOGON = None

if AUTH_SAML2_ENABLED == True:

    # DOMAIN Exemplo: scienceserver-dev.linea.org.br
    # declarado no local_vars.py
    # DOMAIN = env.get("DOMAIN")

    # FQDN Exemplo:https://scienceserver-dev.linea.org.br
    FQDN = BASE_HOST

    # FQDN = "https://" + DOMAIN
    CERT_DIR = "certificates"

    # Including SAML2 Backend Authentication
    # AUTHENTICATION_BACKENDS += ("djangosaml2.backends.Saml2Backend", )
    # Custom Saml2 Backend for LIneA
    AUTHENTICATION_BACKENDS += ("common.saml2.LineaSaml2Backend",)
    # Including SAML2 Middleware
    MIDDLEWARE += ("djangosaml2.middleware.SamlSessionMiddleware",)

    # configurações relativas ao session cookie
    SAML_SESSION_COOKIE_NAME = "saml_session"
    SESSION_COOKIE_SECURE = True

    # Qualquer view que requer um usuário autenticado deve redirecionar o navegador para esta url
    # LOGIN_URL = "/saml2/login/"
    LOGIN_URL = "dri/api/api-auth/login"
    AUTH_SAML2_LOGIN_URL_CAFE = os.environ.get("AUTH_SAML2_LOGIN_URL_CAFE", "https://scienceserver-dev.linea.org.br/saml2/login/?idp=https://satosa.linea.org.br/linea_saml/proxy")
    AUTH_SAML2_LOGIN_URL_CILOGON = os.environ.get("AUTH_SAML2_LOGIN_URL_CILOGON", "https://scienceserver-dev.linea.org.br/saml2/login/?idp=https://satosa.linea.org.br/linea/proxy/aHR0cHM6Ly9jaWxvZ29uLm9yZw==")

    # Encerra a sessão quando o usuário fecha o navegador
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True

    # Tipo de binding utilizado
    SAML_DEFAULT_BINDING = saml2.BINDING_HTTP_POST
    SAML_IGNORE_LOGOUT_ERRORS = True

    # Serviço de descoberta da cafeexpresso
    # SAML2_DISCO_URL = 'https://ds.cafeexpresso.rnp.br/WAYF.php'

    # Cria usuário Django a partir da asserção SAML caso o mesmo não exista
    SAML_CREATE_UNKNOWN_USER = True

    # https://djangosaml2.readthedocs.io/contents/security.html#content-security-policy
    SAML_CSP_HANDLER = ""

    # URL para redirecionamento após a autenticação
    LOGIN_REDIRECT_URL = "/"

    SAML_ATTRIBUTE_MAPPING = {
        "eduPersonUniqueId": ("username",),
        # "eduPersonPrincipalName": ("username",),
        "givenName": ("first_name",),
        "sn": ("last_name",),
        "email": ("email",),
    }

    SAML_CONFIG = {
        # Biblioteca usada para assinatura e criptografia
        "xmlsec_binary": "/usr/bin/xmlsec1",
        "entityid": FQDN + "/saml2/metadata/",
        # Diretório contendo os esquemas de mapeamento de atributo
        "attribute_map_dir": os.path.join(BASE_DIR, "attribute-maps"),
        "description": "SP Science Server",
        "service": {
            "sp": {
                "name": "SP Science Server",
                "ui_info": {
                    "display_name": {"text": "SP Science Server", "lang": "en"},
                    "description": {"text": "SP Science Server", "lang": "en"},
                    "information_url": {"text": FQDN, "lang": "en"},
                    "privacy_statement_url": {"text": FQDN, "lang": "en"},
                },
                "name_id_format": [
                    "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                    "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                ],
                # Indica os endpoints dos serviços fornecidos
                "endpoints": {
                    "assertion_consumer_service": [
                        (FQDN + "/saml2/acs/", saml2.BINDING_HTTP_POST),
                    ],
                    "single_logout_service": [
                        (FQDN + "/saml2/ls/", saml2.BINDING_HTTP_REDIRECT),
                        (FQDN + "/saml2/ls/post", saml2.BINDING_HTTP_POST),
                    ],
                },
                # Algoritmos utilizados
                #'signing_algorithm':  saml2.xmldsig.SIG_RSA_SHA256,
                #'digest_algorithm':  saml2.xmldsig.DIGEST_SHA256,
                "force_authn": False,
                "name_id_format_allow_create": False,
                # Indica que as respostas de autenticação para este SP devem ser assinadas
                "want_response_signed": True,
                # Indica se as solicitações de autenticação enviadas por este SP devem ser assinadas
                "authn_requests_signed": True,
                # Indica se este SP deseja que o IdP envie as asserções assinadas
                "want_assertions_signed": False,
                "only_use_keys_in_metadata": True,
                "allow_unsolicited": False,
            },
        },
        # Indica onde os metadados podem ser encontrados
        "metadata": {
            "remote": [
                {
                    "url": "https://identity.linea.org.br/metadata/satosa-prod-frontend-cilogon.xml",
                    "cert": None,
                },
                {
                    "url": "https://identity.linea.org.br/metadata/satosa-prod-frontend-cafe.xml",
                    "cert": None,
                },
            ]
        },
        # Configurado como 1 para fornecer informações de debug
        "debug": 1,
        # Signature
        "key_file": os.path.join(BASE_DIR, CERT_DIR, "mykey.pem"),  # private part
        "cert_file": os.path.join(BASE_DIR, CERT_DIR, "mycert.pem"),  # public part
        # Encriptation
        "encryption_keypairs": [
            {
                "key_file": os.path.join(
                    BASE_DIR, CERT_DIR, "mykey.pem"
                ),  # private part
                "cert_file": os.path.join(
                    BASE_DIR, CERT_DIR, "mycert.pem"
                ),  # public part
            }
        ],
        "contact_person": [
            {
                "given_name": "Service",
                "sur_name": "Desk",
                "company": "LIneA",
                "email_address": "helpdesk@linea.org.br",
                "contact_type": "technical",
            },
        ],
        # Descreve a organização responsável pelo serviço
        "organization": {
            "name": [("LIneA", "pt-br")],
            "display_name": [("LIneA", "pt-br")],
            "url": [("https://www.linea.org.br", "pt-br")],
        },
    }



# Lista as Variaveis que vao ser exportadas para os templates do Django. https://pypi.python.org/pypi/django-settings-export
SETTINGS_EXPORT = [
    "BASE_HOST",
    "AUTH_SAML2_LOGIN_URL_CAFE",
    "AUTH_SAML2_LOGIN_URL_CILOGON",
]


