# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2017-12-06 18:43
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run', models.CharField(blank=True, max_length=30, null=True, verbose_name='Run')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Created Date')),
                ('archive_path', models.TextField(blank=True, help_text='Original file path', null=True, verbose_name='Archive Path')),
                ('image_src_thumbnails', models.URLField(blank=True, default=None, help_text='Full URL to image including the host and directory. Example: http://{host}/data/releases/{release_name}/images/thumb', null=True, verbose_name='Thumbnails PNG')),
                ('image_src_ptif', models.URLField(blank=True, default=None, help_text='Full URL for visiomatic ptif image, including the host and directory. Use the release name and tilename to create the path. Example: http://{host}/visiomatic?FIF=data/releases/{release_name}/images/visiomatic/{tilename}.ptif', null=True, verbose_name='Visiomatic PTIF')),
            ],
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rls_name', models.CharField(max_length=60, verbose_name='Internal Name')),
                ('rls_display_name', models.CharField(blank=True, max_length=60, null=True, verbose_name='Display Name')),
                ('rls_version', models.CharField(blank=True, max_length=60, null=True, verbose_name='Version')),
                ('rls_date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('rls_description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('rls_doc_url', models.URLField(blank=True, null=True, verbose_name='Doc Url')),
                ('rls_default', models.BooleanField(default=False, help_text='Mark this release as Default so that the interfaces can select this release previously.', verbose_name='Default')),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('srv_project', models.CharField(blank=True, max_length=20, null=True, verbose_name='Project')),
                ('srv_display_name', models.CharField(max_length=80, verbose_name='Display Name')),
                ('srv_url', models.URLField(help_text='Full URL to the aladin images path, including the host and directory. Example: http://{host}/data/releases/{release_name}/images/aladin/{band}', verbose_name='URL')),
                ('srv_target', models.CharField(blank=True, help_text='Initial position for this survey must be hours or degrees. Example: 02 21 36.957 -05 31 10.26 or 35.4832, -5.4800.', max_length=25, null=True, verbose_name='Target')),
                ('srv_fov', models.FloatField(blank=True, help_text='Initial Zoom in degrees.', max_length=10, null=True, verbose_name='FoV')),
                ('srv_filter', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='common.Filter', verbose_name='Filter')),
                ('srv_release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='surveys', to='coadd.Release', verbose_name='Release')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(max_length=60, verbose_name='Internal Name')),
                ('tag_display_name', models.CharField(blank=True, max_length=80, null=True, verbose_name='Display Name')),
                ('tag_install_date', models.DateField(blank=True, null=True, verbose_name='Install Date')),
                ('tag_release_date', models.DateField(blank=True, null=True, verbose_name='Release Date')),
                ('tag_status', models.BooleanField(default=False, verbose_name='Status')),
                ('tag_start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('tag_discovery_date', models.DateField(blank=True, null=True, verbose_name='Discovery Date')),
                ('tag_release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='coadd.Release', verbose_name='Release')),
            ],
        ),
        migrations.CreateModel(
            name='Tile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tli_tilename', models.CharField(max_length=20, unique=True, verbose_name='Tilename')),
                ('tli_project', models.CharField(blank=True, max_length=80, null=True, verbose_name='Project')),
                ('tli_ra', models.FloatField(blank=True, default=0, null=True, verbose_name='RA')),
                ('tli_dec', models.FloatField(blank=True, default=0, null=True, verbose_name='Dec')),
                ('tli_equinox', models.FloatField(blank=True, default=0, null=True, verbose_name='equinox')),
                ('tli_pixelsize', models.FloatField(blank=True, default=0, null=True, verbose_name='pixelsize')),
                ('tli_npix_ra', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='npix_ra')),
                ('tli_npix_dec', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='npix_dec')),
                ('tli_rall', models.FloatField(blank=True, default=0, null=True, verbose_name='RAll')),
                ('tli_decll', models.FloatField(blank=True, default=0, null=True, verbose_name='Decll')),
                ('tli_raul', models.FloatField(blank=True, default=0, null=True, verbose_name='RAul')),
                ('tli_decul', models.FloatField(blank=True, default=0, null=True, verbose_name='Decul')),
                ('tli_raur', models.FloatField(blank=True, default=0, null=True, verbose_name='RAur')),
                ('tli_decur', models.FloatField(blank=True, default=0, null=True, verbose_name='Decur')),
                ('tli_ralr', models.FloatField(blank=True, default=0, null=True, verbose_name='RAlr')),
                ('tli_declr', models.FloatField(blank=True, default=0, null=True, verbose_name='Declr')),
                ('tli_urall', models.FloatField(blank=True, default=0, null=True, verbose_name='urall')),
                ('tli_udecll', models.FloatField(blank=True, default=0, null=True, verbose_name='udecll')),
                ('tli_uraur', models.FloatField(blank=True, default=0, null=True, verbose_name='uraur')),
                ('tli_udecur', models.FloatField(blank=True, default=0, null=True, verbose_name='udecur')),
                ('tli_urall_180', models.FloatField(blank=True, default=0, help_text='urall in -180 a 180 degrees', null=True, verbose_name='urall 180')),
                ('tli_uraur_180', models.FloatField(blank=True, default=0, help_text='uraur in -180 a 180 degrees', null=True, verbose_name='uraur 180')),
            ],
        ),
        migrations.AddField(
            model_name='tag',
            name='tiles',
            field=models.ManyToManyField(through='coadd.Dataset', to='coadd.Tile'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coadd.Tag'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='tile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coadd.Tile'),
        ),
    ]
