# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2017-12-06 18:43
from __future__ import unicode_literals

import current_user
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('coadd', '0001_initial'),
        ('product_register', '0001_initial'),
        ('common', '0001_initial'),
        ('product_classifier', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BookmarkProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_starred', models.BooleanField(default=False, verbose_name='Is Starred')),
                ('owner', models.ForeignKey(default=current_user.get_current_user, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
        ),
        migrations.CreateModel(
            name='CurrentSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Cutout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctt_object_id', models.CharField(blank=True, help_text='The association is used to know which column will be considered as id.', max_length=5, null=True, verbose_name='Object ID')),
                ('ctt_object_ra', models.CharField(blank=True, help_text='RA in degrees, the association will be used to identify the column', max_length=5, null=True, verbose_name='RA')),
                ('ctt_object_dec', models.CharField(blank=True, help_text='Dec in degrees, the association will be used to identify the column', max_length=5, null=True, verbose_name='Dec')),
                ('ctt_thumbname', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Thumbname')),
                ('ctt_file_path', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='File Path')),
                ('ctt_file_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Filename ')),
                ('ctt_file_type', models.CharField(blank=True, default=None, max_length=5, null=True, verbose_name='File Extension')),
                ('ctt_file_size', models.PositiveIntegerField(blank=True, default=None, help_text='File Size in bytes', null=True, verbose_name='File Size')),
                ('ctt_download_start_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Download Start')),
                ('ctt_download_finish_time', models.DateTimeField(blank=True, null=True, verbose_name='Download finish')),
            ],
        ),
        migrations.CreateModel(
            name='CutOutJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cjb_display_name', models.CharField(max_length=40, verbose_name='Name')),
                ('cjb_xsize', models.CharField(default='1.0', help_text='xsize in arcmin, default is 1.0', max_length=5, verbose_name='Xsize')),
                ('cjb_ysize', models.CharField(default='1.0', help_text='ysize in arcmin, default is 1.0', max_length=5, verbose_name='ysize')),
                ('cjb_job_type', models.CharField(choices=[('coadd', 'Coadd Images'), ('single', 'Single Epoch')], max_length=10, verbose_name='Job Type')),
                ('cjb_tag', models.CharField(blank=True, max_length=60, null=True, verbose_name='Release Tag')),
                ('cjb_band', models.CharField(blank=True, max_length=20, null=True, verbose_name='Filters')),
                ('cjb_Blacklist', models.BooleanField(default=False, help_text='Exclude blacklisted ccds', verbose_name='Blacklist')),
                ('cjb_status', models.CharField(choices=[('st', 'Start'), ('bs', 'Submit Job'), ('rn', 'Running'), ('bd', 'Before Download'), ('dw', 'Downloading'), ('ok', 'Done'), ('er', 'Error'), ('je', 'Job Error'), ('dl', 'Delete')], default='st', max_length=25, verbose_name='Status')),
                ('cjb_job_id', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Job ID')),
                ('cjb_label_position', models.CharField(blank=True, choices=[('inside', 'Inside'), ('outside', 'Outside')], default='outside', help_text="This field determines the position of the labels, 'inside' for labels on the image and 'outside' for labels outside the image.", max_length=10, null=True, verbose_name='Label Position')),
                ('cjb_label_properties', models.CharField(blank=True, help_text='A list with the ids of the properties that will be used as a label. (Id = ProductContent.pk)', max_length=1024, null=True, verbose_name='Label Properties')),
                ('cjb_label_colors', models.CharField(blank=True, max_length=6, null=True, verbose_name='Label Font Colors')),
                ('cjb_label_font_size', models.PositiveIntegerField(blank=True, default=10, help_text='Font size in px.', null=True, verbose_name='Label Font Size')),
                ('cjb_cutouts_path', models.CharField(blank=True, default=None, help_text='Path of the directory where the cutouts of this job are.', max_length=2000, null=True, verbose_name='Cutout Paths')),
                ('cjb_results_file', models.CharField(blank=True, default=None, help_text='File that contains the links returned by the DesCutouts service', max_length=2000, null=True, verbose_name='Result File')),
                ('cjb_matched_file', models.CharField(blank=True, default=None, help_text='File containing the relations between ra, dec with the image', max_length=2000, null=True, verbose_name='Matched File')),
                ('cjb_start_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Start')),
                ('cjb_finish_time', models.DateTimeField(blank=True, null=True, verbose_name='Finish')),
                ('cjb_description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Description')),
                ('cjb_image_formats', models.CharField(blank=True, help_text="list of image extensions that will be downloaded from the descut. example 'png,fits'", max_length=10, null=True, verbose_name='Image Formats')),
            ],
        ),
        migrations.CreateModel(
            name='FilterCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fcd_property_name', models.CharField(blank=True, default=None, help_text='Name of the property like this in the database', max_length=60, null=True, verbose_name='Operator')),
                ('fcd_operation', models.CharField(max_length=10, verbose_name='Operator')),
                ('fcd_value', models.CharField(max_length=10, verbose_name='Value')),
            ],
        ),
        migrations.CreateModel(
            name='Filterset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fst_name', models.CharField(help_text='Filterset Display Name', max_length=60, verbose_name='Filterset')),
                ('owner', models.ForeignKey(default=current_user.get_current_user, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prd_name', models.CharField(max_length=128, verbose_name='Internal Name')),
                ('prd_display_name', models.CharField(max_length=128, verbose_name='Display Name')),
                ('prd_user_display_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='User Display Name')),
                ('prd_product_id', models.CharField(blank=True, help_text='Original Product Id', max_length=128, null=True, verbose_name='Product Id')),
                ('prd_version', models.CharField(blank=True, max_length=128, null=True, verbose_name='Version')),
                ('prd_description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Description')),
                ('prd_date', models.DateTimeField(auto_now_add=True, help_text='Date of registration.', null=True, verbose_name='Date')),
                ('prd_is_public', models.BooleanField(default=True, help_text='Is Public default True', verbose_name='Is Public')),
            ],
        ),
        migrations.CreateModel(
            name='ProductContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pcn_column_name', models.CharField(max_length=256, verbose_name='Column Name')),
                ('pcn_ucd', models.CharField(blank=True, help_text='The standard unified content descriptor.', max_length=128, null=True, verbose_name='UCD')),
            ],
        ),
        migrations.CreateModel(
            name='ProductContentAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pca_class_content', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='product_classifier.ProductClassContent', verbose_name='Class Content')),
            ],
        ),
        migrations.CreateModel(
            name='ProductContentSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pcs_is_visible', models.BooleanField(default=False, verbose_name='Is Visible')),
                ('pcs_order', models.PositiveIntegerField(blank=True, null=True, verbose_name='Order')),
                ('pcs_content', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='product.ProductContent', verbose_name='Content')),
            ],
        ),
        migrations.CreateModel(
            name='ProductRelated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prl_cross_identification', models.ForeignKey(blank=True, default=None, help_text='Foreign key between the product and the related product', null=True, on_delete=django.db.models.deletion.CASCADE, to='product.ProductContent', verbose_name='Cross Identification')),
            ],
        ),
        migrations.CreateModel(
            name='ProductRelease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ProductSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cst_display_name', models.CharField(max_length=128, verbose_name='Name')),
                ('cst_description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Description')),
                ('cst_is_editable', models.BooleanField(default=False, verbose_name='Is Editable')),
                ('cst_is_public', models.BooleanField(default=False, verbose_name='Is Public')),
            ],
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Workgroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wgp_workgroup', models.CharField(help_text="group's name", max_length=60, verbose_name='Workgroup')),
                ('owner', models.ForeignKey(default=current_user.get_current_user, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
        ),
        migrations.CreateModel(
            name='WorkgroupUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wgu_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('wgu_workgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Workgroup', verbose_name='Workgroup')),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='product.Product')),
                ('fli_base_path', models.CharField(max_length=256, verbose_name='Base path')),
                ('fli_name', models.CharField(max_length=128, verbose_name='Filename with extension')),
            ],
            bases=('product.product',),
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='product.Product')),
                ('tbl_database', models.CharField(blank=True, help_text='Database identifier in settings', max_length=128, null=True, verbose_name='Database')),
                ('tbl_schema', models.CharField(blank=True, max_length=128, null=True, verbose_name='Schema name')),
                ('tbl_name', models.CharField(help_text='Tablename without schema', max_length=128, verbose_name='Tablename')),
                ('tbl_rows', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num of rows')),
                ('tbl_num_columns', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num of columns')),
                ('tbl_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Size in bytes')),
            ],
            bases=('product.product',),
        ),
        migrations.AddField(
            model_name='producttag',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product'),
        ),
        migrations.AddField(
            model_name='producttag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coadd.Tag'),
        ),
        migrations.AddField(
            model_name='productsetting',
            name='cst_product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='productsetting',
            name='owner',
            field=models.ForeignKey(default=current_user.get_current_user, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='productrelease',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product'),
        ),
        migrations.AddField(
            model_name='productrelease',
            name='release',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coadd.Release'),
        ),
        migrations.AddField(
            model_name='productrelated',
            name='prl_product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='productrelated',
            name='prl_related',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relateds', to='product.Product', verbose_name='Related Product'),
        ),
        migrations.AddField(
            model_name='productcontentsetting',
            name='pcs_setting',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='product.ProductSetting', verbose_name='Setting'),
        ),
        migrations.AddField(
            model_name='productcontentassociation',
            name='pca_product',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='productcontentassociation',
            name='pca_product_content',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='product.ProductContent', verbose_name='Product Content'),
        ),
        migrations.AddField(
            model_name='productcontent',
            name='pcn_product_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='product',
            name='prd_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product_classifier.ProductClass', verbose_name='Product class'),
        ),
        migrations.AddField(
            model_name='product',
            name='prd_filter',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='common.Filter', verbose_name='Filter'),
        ),
        migrations.AddField(
            model_name='product',
            name='prd_owner',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='product',
            name='prd_process_id',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='product_register.ExternalProcess', verbose_name='External Process'),
        ),
        migrations.AddField(
            model_name='product',
            name='releases',
            field=models.ManyToManyField(default=None, through='product.ProductRelease', to='coadd.Release', verbose_name='Releases'),
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(default=None, through='product.ProductTag', to='coadd.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='permission',
            name='prm_product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='permission',
            name='prm_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='permission',
            name='prm_workgroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='product.Workgroup', verbose_name='Workgroup'),
        ),
        migrations.AddField(
            model_name='filterset',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='filtercondition',
            name='fcd_property',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='product.ProductContent', verbose_name='Property'),
        ),
        migrations.AddField(
            model_name='filtercondition',
            name='filterset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Filterset', verbose_name='Filterset'),
        ),
        migrations.AddField(
            model_name='cutoutjob',
            name='cjb_product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='cutoutjob',
            name='owner',
            field=models.ForeignKey(default=current_user.get_current_user, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='cutout',
            name='cjb_cutout_job',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='product.CutOutJob', verbose_name='Cutout Job'),
        ),
        migrations.AddField(
            model_name='cutout',
            name='ctt_filter',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='common.Filter', verbose_name='Filter'),
        ),
        migrations.AddField(
            model_name='currentsetting',
            name='cst_product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='currentsetting',
            name='cst_setting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.ProductSetting', verbose_name='Setting'),
        ),
        migrations.AddField(
            model_name='currentsetting',
            name='owner',
            field=models.ForeignKey(default=current_user.get_current_user, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='bookmarkproduct',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='Product'),
        ),
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('table_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='product.Table')),
                ('ctl_num_objects', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num of objects')),
            ],
            bases=('product.table',),
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('table_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='product.Table')),
                ('mpa_nside', models.PositiveSmallIntegerField(verbose_name='Nside')),
                ('mpa_ordering', models.CharField(max_length=8, verbose_name='Ordering')),
            ],
            bases=('product.table',),
        ),
        migrations.CreateModel(
            name='Mask',
            fields=[
                ('table_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='product.Table')),
                ('msk_filter', models.CharField(max_length=1, verbose_name='Filter')),
            ],
            bases=('product.table',),
        ),
        migrations.AlterUniqueTogether(
            name='cutout',
            unique_together=set([('cjb_cutout_job', 'ctt_file_name')]),
        ),
        migrations.AlterIndexTogether(
            name='cutout',
            index_together=set([('cjb_cutout_job', 'ctt_object_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='bookmarkproduct',
            unique_together=set([('product', 'owner')]),
        ),
    ]
